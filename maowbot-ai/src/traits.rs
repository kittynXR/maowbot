use std::collections::HashMap;
use async_trait::async_trait;
use serde_json::Value;
use crate::function::Function;

/// Trait defining the AI model interface
#[async_trait]
pub trait ModelProvider: Send + Sync {
    /// Get the name of this provider
    fn name(&self) -> &str;
    
    /// Generate text completion from a prompt
    async fn complete(&self, prompt: &str) -> anyhow::Result<String>;
    
    /// Generate a chat completion with context
    async fn chat(&self, messages: Vec<ChatMessage>) -> anyhow::Result<String>;
    
    /// Generate a chat completion with function calling capabilities
    async fn chat_with_functions(
        &self, 
        messages: Vec<ChatMessage>,
        functions: Vec<Function>
    ) -> anyhow::Result<ChatResponse>;
}

/// Represents a chat message
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
pub struct ChatMessage {
    /// The role of the message sender (system, user, assistant)
    pub role: String,
    
    /// The content of the message
    pub content: String,
}

/// Response from an AI chat completion with potential function calls
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
pub struct ChatResponse {
    /// The text response from the model
    pub content: Option<String>,
    
    /// Optional function call if the model decided to call a function
    pub function_call: Option<FunctionCall>,
}

/// Function call generated by an AI model
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
pub struct FunctionCall {
    /// Name of the function to call
    pub name: String,
    
    /// Arguments to pass to the function as a JSON object
    pub arguments: HashMap<String, Value>,
}

/// Trait for integration with Maowbot BotApi
#[async_trait]
pub trait AiApi: Send + Sync {
    /// Generate a chat completion
    async fn generate_chat(&self, messages: Vec<ChatMessage>) -> anyhow::Result<String>;
    
    /// Generate a completion with function calling
    async fn generate_with_functions(&self, messages: Vec<ChatMessage>) -> anyhow::Result<ChatResponse>;
    
    /// Process a user message with context
    async fn process_user_message(&self, user_id: uuid::Uuid, message: &str) -> anyhow::Result<String>;
    
    /// Register a new function
    async fn register_ai_function(&self, name: &str, description: &str) -> anyhow::Result<()>;
    
    /// Set the system prompt
    async fn set_system_prompt(&self, prompt: &str) -> anyhow::Result<()>;
}

/// Trait for a memory system that stores and retrieves conversation history
#[async_trait]
pub trait MemorySystem: Send + Sync {
    /// Store a user interaction in memory
    async fn store(&self, user_id: &str, message: ChatMessage) -> anyhow::Result<()>;
    
    /// Retrieve recent conversation history for a user
    async fn retrieve(&self, user_id: &str, limit: usize) -> anyhow::Result<Vec<ChatMessage>>;
    
    /// Clear conversation history for a user
    async fn clear(&self, user_id: &str) -> anyhow::Result<()>;
    
    /// Summarize conversation context for a user
    async fn summarize(&self, user_id: &str) -> anyhow::Result<String>;
}